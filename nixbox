#!/bin/sh
# A menu driven shell script to manage nixos operations

# ----------------------------------
# Variables
# ----------------------------------
red=$'\e[1;31m'
green=$'\e[1;32m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
mag=$'\e[1;35m'
cyan=$'\e[1;36m'
end=$'\e[0m'

# ----------------------------------
# Function
# ----------------------------------

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
        if [[ $key = $ESC[A ]]; then echo up;    fi
        if [[ $key = $ESC[B ]]; then echo down;  fi
        if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
                down)  ((selected++));
                    if [ $selected -ge $# ]; then selected=0; fi;;
                esac
            done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function select_opt {
    select_option "$@" 1>&2
    local result=$?
    echo $result
    return $result
}

#-------- =[ Util Functions ]= --------#
pause(){
    read -p "Press [Enter] key to continue..." fackEnterKey
}

pressAnyKey(){
    echo
    read -p "Press any key to continue " -n 1 -r
}

#-------- =[ Generations ]= --------#
deleteUserProfileGeneration(){
    sh -c "nix-env --delete-generations +5"
   # echo -e "${blue}Finishing...(Delete UserProfile Generation)${end}" && sleep 1
}

deleteRootProfileGeneration(){
    sh -c "sudo nix-env --delete-generations +5"
}

deleteSystemProfileGeneration(){
    sh -c "sudo nix-env --delete-generations --profile /nix/var/nix/profiles/system +5"
}

DeleteGenerations(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " D E L E T E - G E N E R A T I O N S"
    echo "~~~~~~~~~~~~~~~~~~~~~"

    userChoice=$(select_opt\
        "0. Delete User Profile Generations"\
        "1. Delete Root Profile Generations"\
        "2. Delete System Profile Generations"\
        "3. Delete All Generations"\
        "4. Back")

    case "$userChoice" in
        0) deleteUserProfileGeneration; pressAnyKey; DeleteGenerations ;;
        1) deleteRootProfileGeneration; pressAnyKey; DeleteGenerations;;
        2) deleteSystemProfileGeneration; pressAnyKey; DeleteGenerations;;
        3) deleteUserProfileGeneration; deleteRootProfileGeneration; deleteSystemProfileGeneration; pressAnyKey; DeleteGenerations;;
        4) Generations ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            DeleteGenerations;;
    esac
}

listUserProfileGeneration(){
    nix-env --list-generations --profile /nix/var/nix/profiles/per-user/$USER/profile
}

listDefaultProfileGeneration(){
    sudo nix-env --list-generations --profile /nix/var/nix/profiles/default
}

listSystemProfileGeneration(){
    sudo nix-env --list-generations --profile /nix/var/nix/profiles/system
}

ListGenerations(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " L I S T - G E N E R A T I O N S"
    echo "~~~~~~~~~~~~~~~~~~~~~"

    userChoice=$(select_opt\
        "0. List User Profile Generations"\
        "1. List Default(Root) Profile Generations"\
        "2. List System Profile Generations"\
        "3. Back")

    case "$userChoice" in
        0) listUserProfileGeneration; pressAnyKey; ListGenerations ;;
        1) listDefaultProfileGeneration; pressAnyKey; ListGenerations;;
        2) listSystemProfileGeneration; pressAnyKey; ListGenerations;;
        3) Generations ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            ListGenerations;;
    esac
}

Generations(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " G E N E R A T I O N S"
    echo "~~~~~~~~~~~~~~~~~~~~~"

    userChoice=$(select_opt\
        "0. List"\
        "1. Delete"\
        "2. Back")

    case "$userChoice" in
        0) ListGenerations; Generations ;;
        1) DeleteGenerations; Generations;;
        2) show_menus ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            Generations;;
    esac
}

#-------- =[ GC ]= --------#
GCProfile(){
    sh -c "nix-collect-garbage"
}

GCSystem(){
    sh -c "sudo nix-collect-garbage"
}

GC(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " R U N - G C"
    echo "~~~~~~~~~~~~~~~~~~~~~"

    userChoice=$(select_opt\
        "0. Run GC (user profile)"\
        "1. Run GC (system profile)"\
        "2. Run GC (both)"\
        "3. Back")

    case "$userChoice" in
        0) GCProfile; pressAnyKey; GC ;;
        1) GCSystem; pressAnyKey; GC ;;
        2) GCProfile; GCSystem; pressAnyKey; GC ;;
        3) show_menus ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            GC;;
    esac
}

#-------- =[ Fix ]= --------#
RebuildFix(){
    sudo nixos-rebuild switch --repair
}

AdvanceFix(){
    sudo nix-store --verify --check-contents --repair
}

Fix(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " F I X"
    echo "~~~~~~~~~~~~~~~~~~~~~"

    userChoice=$(select_opt\
        "0. Rebuild-Fix" \
        "1. Scan the entire Nix store and fix corrupted paths"\
        "2. Back")

    case "$userChoice" in
        0) RebuildFix; pressAnyKey; Fix ;;
        1) AdvanceFix; pressAnyKey; Fix ;;
        2) show_menus ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            Fix;;
    esac
}

#-------- =[ Locate ]= --------#
indexFiles(){
    read -p "${red}This may take some times. Are you sure to continue? ${end}" choice
    case $choice in
        'y'|'Y'|"Yes"|"yes") nix-index;;
        'n'|'N'|"No"|"no") Locate ;;
        *) echo -e "${RED}Error...${STD}" && sleep 2
    esac
}

locateFiles(){
    read -p "Enter file name(like: 'bin/firefox') " fileName
    sh -c "nix-locate $fileName"
}

locateLibraries(){
    read -p "Enter .so name(like: libexpat.so.1 ) " libName
    nix-locate $libName --top-level --minimal
}

Locate(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " L O C A T E"
    echo "~~~~~~~~~~~~~~~~~~~~~"

    userChoice=$(select_opt\
        "0. nix-index" \
        "1. locate files"\
        "2. locate .so files for corresponding packages"\
        "3. Back")

    case "$userChoice" in
        0) indexFiles  ; pressAnyKey; Locate ;;
        1) locateFiles ; pressAnyKey; Locate ;;
        2) locateLibraries; pressAnyKey; Locate;;
        3) show_menus ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            Locate;;
    esac
}

Utilities(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " U T I L I T I E S"
    echo "~~~~~~~~~~~~~~~~~~~~~"

    userChoice=$(select_opt\
        "0. update font cache" \
        "1. REPL"\
        "2. Back")

    case "$userChoice" in
        0) fc-cache -f ; pressAnyKey; Utilities ;;
        1) nix repl '<nixpkgs/nixos>' ; pressAnyKey; Utilities ;;
        2) show_menus ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            Utilities;;
    esac
}

#-------- =[ Show Main Menu ]= --------#
show_menus() {
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " M A I N - M E N U"
    echo "~~~~~~~~~~~~~~~~~~~~~"
    userChoice=$(select_opt\
        "0. Generations"\
        "1. GC"\
        "2. Fix"\
        "3. Locate"\
        "4. Utilities"\
        "5. Exit")
    case "$userChoice" in
        0) Generations ;;
        1) GC ;;
        2) Fix ;;
        3) Locate ;;
        4) Utilities ;;
        5) exit 0;;
        *) echo -e "${red}Error...${end}" && sleep 2
    esac
}

#-------- =[ Main logic - infinite loop ]= --------#
while true
do
    show_menus
done

#-------- =[ Trap CTRL+C, CTRL+Z and quit singles ]= --------#
#trap '' SIGINT SIGQUIT SIGTSTP

#-------- =[ Garbage ]= --------#
#read_options(){
#    local choice
#    read -p "Enter choice [ 1 - 5] " choice
#    case $choice in
#        1) Generations ;;
#        2) GC ;;
#        3) Fix ;;
#        5) exit 0;;
#        *) echo -e "${RED}Error...${STD}" && sleep 2
#    esac
#}

#RED='\033[0;41;30m'
#BLUE='\033[0;41;34m'
#CYAN='\033[0;41;36m'
#STD='\033[0;0;39m'
