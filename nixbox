#!/bin/sh
# A menu driven shell script to manage nixos operations

# ----------------------------------
# Variables
# ----------------------------------
red=$'\e[1;31m'
green=$'\e[1;32m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
mag=$'\e[1;35m'
cyan=$'\e[1;36m'
end=$'\e[0m'

# ----------------------------------
# Function
# ----------------------------------

# Renders a text based list of options that can be selected by the
# user using up, down and enter keys and returns the chosen option.
#
#   Arguments   : list of options, maximum of 256
#                 "opt1" "opt2" ...
#   Return value: selected index (0 for opt1, 1 for opt2 ...)
function select_option {

    # little helpers for terminal print control and key input
    ESC=$( printf "\033")
    cursor_blink_on()  { printf "$ESC[?25h"; }
    cursor_blink_off() { printf "$ESC[?25l"; }
    cursor_to()        { printf "$ESC[$1;${2:-1}H"; }
    print_option()     { printf "   $1 "; }
    print_selected()   { printf "  $ESC[7m $1 $ESC[27m"; }
    get_cursor_row()   { IFS=';' read -sdR -p $'\E[6n' ROW COL; echo ${ROW#*[}; }
    key_input()        { read -s -n3 key 2>/dev/null >&2
        if [[ $key = $ESC[A ]]; then echo up;    fi
        if [[ $key = $ESC[B ]]; then echo down;  fi
        if [[ $key = ""     ]]; then echo enter; fi; }

    # initially print empty new lines (scroll down if at bottom of screen)
    for opt; do printf "\n"; done

    # determine current screen position for overwriting the options
    local lastrow=`get_cursor_row`
    local startrow=$(($lastrow - $#))

    # ensure cursor and input echoing back on upon a ctrl+c during read -s
    trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
    cursor_blink_off

    local selected=0
    while true; do
        # print options by overwriting the last lines
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ $idx -eq $selected ]; then
                print_selected "$opt"
            else
                print_option "$opt"
            fi
            ((idx++))
        done

        # user key control
        case `key_input` in
            enter) break;;
            up)    ((selected--));
                if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi;;
                down)  ((selected++));
                    if [ $selected -ge $# ]; then selected=0; fi;;
                esac
            done

    # cursor position back to normal
    cursor_to $lastrow
    printf "\n"
    cursor_blink_on

    return $selected
}

function select_opt {
    select_option "$@" 1>&2
    local result=$?
    echo $result
    return $result
}

pause(){
    read -p "Press [Enter] key to continue..." fackEnterKey
}

deleteUserProfileGeneration(){
    sh -c "nix-env --delete-generations +5"
    echo -e "${blue}Finishing...(Delete UserProfile Generation)${end}" && sleep 1
}

deleteRootProfileGeneration(){
    sh -c "sudo nix-env --delete-generations +5"
    echo -e "${blue}Finishing...(Delete RootProfile Generation)${end}"
}

deleteSystemProfileGeneration(){
    sh -c "sudo nix-env --delete-generations --profile /nix/var/nix/profiles/system +5"
    echo -e "${blue}Finishing...(Delete SystemProfile Generation)${end}"
}

RunGCProfile(){
    sh -c "nix-collect-garbage"
    echo -e "${blue}Finishing...(Run GC Profile)${end}" && sleep 1
}

RunGCSystem(){
    sh -c "sudo nix-collect-garbage"
    echo -e "${blue}Finishing...(Run GC System) ${end}" && sleep 1
}

RebuildFix(){
    sudo nixos-rebuild switch --repair
    echo -e "${blue}Finishing...(Rebuild-Fix) ${end}" && sleep 1
}

AdvanceFix(){
    sudo nix-store --verify --check-contents --repair
    echo -e "${blue}Finishing...(Advance Fix) ${end}" && sleep 1
}

pressAnyKey(){
    echo
    read -p "Press any key to continue " -n 1 -r
}

RunGC(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " R U N - G C"
    echo "~~~~~~~~~~~~~~~~~~~~~"
    userChoice=$(select_opt\
        "0. Run GC (user profile)"\
        "1. Run GC (system profile)"\
        "2. Run GC (both)"\
        "3. Back")
            case "$userChoice" in
                0) RunGCProfile; pressAnyKey; RunGC ;;
                1) RunGCSystem; pressAnyKey; RunGC ;;
                2) RunGCProfile; RunGCSystem; pressAnyKey; RunGC ;;
                3) show_menus ;;
                *) echo -e "${red}Error...${end}" && sleep 2
                    RunGC;;
            esac
}

Fix(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " F I X"
    echo "~~~~~~~~~~~~~~~~~~~~~"
    userChoice=$(select_opt\
        "0. Rebuild-Fix" \
        "1. Scan the entire Nix store and fix corrupted paths"\
        "2. Back")
            case "$userChoice" in
                0) RebuildFix; pressAnyKey; Fix ;;
                1) AdvanceFix; pressAnyKey; Fix ;;
                2) show_menus ;;
                *) echo -e "${red}Error...${end}" && sleep 2
                    Fix;;
            esac
}

DeleteGenerations(){
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " D E L E T E - G E N E R A T I O N S"
    echo "~~~~~~~~~~~~~~~~~~~~~"
    userChoice=$(select_opt\
        "0. Delete User Profile Generations"\
        "1. Delete Root Profile Generations"\
        "2. Delete System Profile Generations"\
        "3. Delete All Generations"\
        "4. Back")
    case "$userChoice" in
        0) deleteUserProfileGeneration; pressAnyKey; DeleteGenerations ;;
        1) deleteRootProfileGeneration; pressAnyKey; DeleteGenerations;;
        2) deleteSystemProfileGeneration; pressAnyKey; DeleteGenerations;;
        3) deleteUserProfileGeneration; deleteRootProfileGeneration; deleteSystemProfileGeneration; pressAnyKey; DeleteGenerations;;
        4) show_menus ;;
        *) echo -e "${red}Error...${end}" && sleep 2
            DeleteGenerations;;
    esac
}

show_menus() {
    clear
    echo "~~~~~~~~~~~~~~~~~~~~~"
    echo " M A I N - M E N U"
    echo "~~~~~~~~~~~~~~~~~~~~~"
    userChoice=$(select_opt "0. Delete Generations" "1. Run GC" "2. Fix" "3. Locate" "4. Exit")
    case "$userChoice" in
        0) DeleteGenerations ;;
        1) RunGC ;;
        2) Fix ;;
        3) Locate ;;
        4) exit 0;;
        *) echo -e "${red}Error...${end}" && sleep 2
    esac
}

# ----------------------------------------------
# Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
#trap '' SIGINT SIGQUIT SIGTSTP

# -----------------------------------
# Main logic - infinite loop
# ------------------------------------
while true
do
    show_menus
done

# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
#read_options(){
#    local choice
#    read -p "Enter choice [ 1 - 5] " choice
#    case $choice in
#        1) DeleteGenerations ;;
#        2) RunGC ;;
#        3) Fix ;;
#        5) exit 0;;
#        *) echo -e "${RED}Error...${STD}" && sleep 2
    #    esac
    #}

#RED='\033[0;41;30m'
#BLUE='\033[0;41;34m'
#CYAN='\033[0;41;36m'
#STD='\033[0;0;39m'
